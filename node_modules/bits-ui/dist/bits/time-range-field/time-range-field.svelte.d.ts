import type { Time } from "@internationalized/date";
import { DOMContext } from "svelte-toolbelt";
import { Context } from "runed";
import type { TimeFieldRootState } from "../time-field/time-field.svelte.js";
import { TimeFieldInputState } from "../time-field/time-field.svelte.js";
import type { ReadableBoxedValues, WritableBoxedValues } from "../../internal/box.svelte.js";
import type { TimeSegmentPart } from "../../shared/index.js";
import type { WithRefProps } from "../../internal/types.js";
import type { TimeGranularity, TimeOnInvalid, TimeRange, TimeRangeValidator, TimeValue } from "../../shared/date/types.js";
import { type TimeFormatter } from "../../internal/date-time/formatter.js";
export declare const timeRangeFieldAttrs: import("../../internal/attrs.js").BitsAttrs<readonly ["root", "label"]>;
type TimeRangeFieldRootStateProps<T extends TimeValue = Time> = WithRefProps<WritableBoxedValues<{
    value: TimeRange<T>;
    placeholder: TimeValue;
    startValue: T | undefined;
    endValue: T | undefined;
}> & ReadableBoxedValues<{
    readonlySegments: TimeSegmentPart[];
    validate: TimeRangeValidator<T> | undefined;
    onInvalid: TimeOnInvalid | undefined;
    minValue: TimeValue | undefined;
    maxValue: TimeValue | undefined;
    disabled: boolean;
    readonly: boolean;
    granularity: TimeGranularity | undefined;
    hourCycle: 12 | 24 | undefined;
    locale: string;
    hideTimeZone: boolean;
    required: boolean;
    errorMessageId: string | undefined;
}>>;
export declare class TimeRangeFieldRootState<T extends TimeValue = Time> {
    #private;
    readonly opts: TimeRangeFieldRootStateProps<T>;
    startFieldState: TimeFieldRootState | undefined;
    endFieldState: TimeFieldRootState | undefined;
    descriptionId: string;
    formatter: TimeFormatter;
    fieldNode: HTMLElement | null;
    labelNode: HTMLElement | null;
    descriptionNode: HTMLElement | null;
    startValueComplete: boolean;
    endValueComplete: boolean;
    rangeComplete: boolean;
    startValueTime: Time | undefined;
    endValueTime: Time | undefined;
    minValueTime: Time | undefined;
    maxValueTime: Time | undefined;
    domContext: DOMContext;
    constructor(opts: TimeRangeFieldRootStateProps<T>);
    validationStatus: false | {
        readonly reason: "custom";
        readonly message: string | string[];
    } | {
        readonly reason: "min";
        readonly message?: undefined;
    } | {
        readonly reason: "max";
        readonly message?: undefined;
    };
    isInvalid: boolean;
    props: {
        readonly id: string;
        readonly role: "group";
        readonly "data-invalid": "" | undefined;
    };
}
type TimeRangeFieldLabelStateProps = WithRefProps;
declare class TimeRangeFieldLabelState {
    #private;
    readonly opts: TimeRangeFieldLabelStateProps;
    readonly root: TimeRangeFieldRootState;
    constructor(opts: TimeRangeFieldLabelStateProps, root: TimeRangeFieldRootState);
    props: {
        readonly id: string;
        readonly "data-invalid": "" | undefined;
        readonly "data-disabled": "" | undefined;
        readonly onclick: () => void;
    };
}
type TimeRangeFieldInputStateProps<T extends TimeValue = Time> = WritableBoxedValues<{
    value: T | undefined;
}> & ReadableBoxedValues<{
    name: string;
}> & WithRefProps;
export declare const TimeRangeFieldRootContext: Context<TimeRangeFieldRootState<Time>>;
export declare function useTimeRangeFieldRoot<T extends TimeValue = Time>(props: TimeRangeFieldRootStateProps<T>): TimeRangeFieldRootState<Time>;
export declare function useTimeRangeFieldLabel(props: TimeRangeFieldLabelStateProps): TimeRangeFieldLabelState;
export declare function useTimeRangeFieldInput(props: Omit<TimeRangeFieldInputStateProps, "value">, type: "start" | "end"): TimeFieldInputState;
export {};
